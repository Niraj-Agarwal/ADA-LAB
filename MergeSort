#include <iostream>
#include <vector>
#include <ctime> // Include the ctime library for time complexity measurement
using namespace std;

// Merge function to merge two sorted subarrays into one
// Time complexity: O(n)
// Space complexity: O(n)
void merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;   // starting index of left half of arr
    int right = mid + 1;  // starting index of right half of arr

    // Storing elements in the temporary array in a sorted manner
    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // If elements on the left half are still left
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    // If elements on the right half are still left
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // Transfering all elements from temporary to arr
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

// Merge sort function to recursively sort the array
// Time complexity: O(n log n)
// Space complexity: O(n) due to recursive calls
void mergeSort(vector<int> &arr, int low, int high) {
    if (low >= high) return;
    int mid = (low + high) / 2;
    mergeSort(arr, low, mid);      // Left half
    mergeSort(arr, mid + 1, high); // Right half
    merge(arr, low, mid, high);    // Merging sorted halves
}

int main() {
    vector<int> arr = {9, 4, 7, 6, 3, 1, 5};
    int n = arr.size();

    // Start time complexity measurement
    clock_t start_time = clock();

    // Print space complexity
    cout << "Space complexity: O(n)" << endl;

    mergeSort(arr, 0, n - 1);

    // End time complexity measurement
    clock_t end_time = clock();
    double time_taken = double(end_time - start_time) / double(CLOCKS_PER_SEC);
    cout << "Time complexity: O(n log n)" << endl;
    cout << "Time taken: " << time_taken << " seconds" << endl;

    cout << "Sorted Array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
